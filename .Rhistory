axis.text.y= theme_text(size = 16))
matplot(matrix(gasoline$NIR, 401, 60), pch = 1)
matplot(matrix(gasoline$NIR, 60, 401), pch = 1)
matplot(matrix(gasoline$NIR, 401, 60), pch = 1)
matplot(matrix(gasoline$NIR, 401, 60), pch = 1, type = "l")
matplot(matrix(gasoline$NIR, 401, 60), pch = 1, type = "l", col = "black")
x <- matrix(gasoline$NIR, 401, 60)
x <- matrix(gasoline$NIR)
dim(x)
x <- matrix(gasoline$NIR, 401, 60)
dim(x)
plot(x[1, ])
matplot(t(matrix(gasoline$NIR, 401, 60)), pch = 1, type = "l", col = "black")
matplot(t(matrix(gasoline$NIR, 401, 60)), pch = 1, lwd = 2, type = "l", col = "black")
matplot(t(matrix(gasoline$NIR, 401, 60)[1, ]), pch = 1, lwd = 2, type = "l", col = "black")
matplot(t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black")
xl <- seq(900, 1700, by = 100)
xl
matplot(t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black", xlim = xl
)
matplot(t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black", xlim = xl)
matplot(t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black", xlim = c(900, 1700))
matplot(t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black")
xl <- seq(900, 1700, by = 2)
matplot(matrix(rep(xl, 10), 401, 10) ,t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black")
matplot(t(matrix(rep(xl, 10), 401, 10)), t(matrix(gasoline$NIR, 401, 60)[1:10, ]), pch = 1, lwd = 2, type = "l", col = "black")
dim(t(matrix(rep(xl, 10), 401, 10)))
dim(t(matrix(gasoline$NIR, 401, 60)[1:10, ]))
dat <- gasoline$NIR[1:10, ]
dim(dat)
dim(xl)
xl <- t(matrix(rep(xl, 10), 401, 10))
dim(xl)
matplot(xl, dat, pch = 1, lwd = 2, type = "l", col = "black")
matplot(xl, dat, lwd = 2, type = "l", col = "black")
matplot(xl, dat, lwd = 2, type = "s", col = "black")
matplot(xl, dat, lwd = 2, type = "line", col = "black")
matplot(xl, dat, lwd = 2, type = "l", col = "black")
matplot(xl, dat, lwd = 1, type = "l", col = "black")
plot(dat[1, ])
plot(dat[1, ], type = "l")
plot(xl[1, ], dat[1, ], type = "l")
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1)
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- t(matrix(rep(xl, 1), 401, 1))
dat <- gasoline$NIR[1:1, ]
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
dat <- gasoline$NIR[1, ]
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- t(matrix(rep(xl, 10), 401, 10))
dat <- t(gasoline$NIR[1:10, ])
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- (matrix(rep(xl, 10), 401, 10))
dat <- t(gasoline$NIR[1:10, ])
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- t(matrix(rep(xl, 10), 401, 10))
dat <- t(gasoline$NIR[1:10, ])
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
dat <- (gasoline$NIR[1:10, ])
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
dat <- t(gasoline$NIR[1:10, ])
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- (matrix(rep(xl, 10), 401, 10))
dat <- t(gasoline$NIR[1:10, ])
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- t(matrix(rep(xl, 10), 401, 10))
dat <- gasoline$NIR[1:10, ]
matplot(xl, dat, lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
matplot(xl, t(dat), lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
matplot(t(xl), t(dat), lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
xl <- t(matrix(rep(seq(900, 1700, by = 2), 10), 401, 10))
dat <- gasoline$NIR[1:10, ]
matplot(t(xl), t(dat), lwd = 1, type = "l", col = "black", pch = 1, lty = 1)
matplot(t(xl), t(dat), lwd = 2, type = "l", col = "black", pch = 1, lty = 1)
matplot(t(xl), t(dat), lwd = 2, type = "l", col = "black", pch = 1, lty = 1, ylab = "")
matplot(t(xl), t(dat), lwd = 2, type = "l", col = "black", pch = 1, lty = 1, ylab = "", xlab = "")
matplot(t(xl), t(dat), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
require(RCurl)
require(rjson)
install.packages("rjson")
require(rjson)
facebook <-  function( path = "me", access_token = token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
}
install.packages("Rgraphviz")
install.packages("RGraphics")
install.packages("pixmap")
access_token <- AAACEdEose0cBANWIEktX4D6s5yzpaskKKjg0gOKsy16iixZA1EWTaaKcBJMZBAZAFJ7OZA0UcKOVtod5wpAkEZBEdlI7AxsibhCaXEZA5iWa2B7VaucjjC
access_token <- "AAACEdEose0cBANWIEktX4D6s5yzpaskKKjg0gOKsy16iixZA1EWTaaKcBJMZBAZAFJ7OZA0UcKOVtod5wpAkEZBEdlI7AxsibhCaXEZA5iWa2B7VaucjjC"
friends <- facebook( path="me/friends" , access_token=access_token)
friends <- facebook( path="me/friends" , access_token=access_token)
facebook <-  function( path = "me", access_token = token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
}
access_token <- "AAACEdEose0cBANWIEktX4D6s5yzpaskKKjg0gOKsy16iixZA1EWTaaKcBJMZBAZAFJ7OZA0UcKOVtod5wpAkEZBEdlI7AxsibhCaXEZA5iWa2B7VaucjjC"
friends <- facebook( path="me/friends" , access_token=access_token)
source("facebook.R")
source("~/Documents/Programmieren/R_Code/facebook/facebook.R")
source("~/Documents/Programmieren/R_Code/facebook/facebook.R")
source("~/Documents/Programmieren/R_Code/facebook/facebook.R")
source("~/Documents/Programmieren/R_Code/facebook/facebook.R")
access_token <- "AAACEdEose0cBANWIEktX4D6s5yzpaskKKjg0gOKsy16iixZA1EWTaaKcBJMZBAZAFJ7OZA0UcKOVtod5wpAkEZBEdlI7AxsibhCaXEZA5iWa2B7VaucjjC"
friends <- facebook( path="me/friends" , access_token=access_token)
friends.id <- sapply(friends$data, function(x) x$id)
# extract names
friends.name <- sapply(friends$data, function(x)  iconv(x$name,"UTF-8","ASCII//TRANSLIT"))
# short names to initials
initials <- function(x) paste(substr(x,1,1), collapse="")
friends.initial <- sapply(strsplit(friends.name," "), initials)
fix(friends)
initials <- function(x) paste(substr(x,1,1), collapse="")
friends.initial <- sapply(strsplit(friends.name," "), initials)
# friendship relation matrix
N <- length(friends.id)
friendship.matrix <- matrix(0,N,N)
for (i in 1:N) {
tmp <- facebook( path=paste("me/mutualfriends", friends.id[i], sep="/") , access_token=access_token)
mutualfriends <- sapply(tmp$data, function(x) x$id)
friendship.matrix[i,friends.id %in% mutualfriends] <- 1
}
for (i in 1:N) {
tmp <- facebook( path=paste("me/mutualfriends", friends.id[i], sep="/") , access_token=access_token)
mutualfriends <- sapply(tmp$data, function(x) x$id)
friendship.matrix[i,friends.id %in% mutualfriends] <- 1
}
require(Rgraphviz)
# convert relation matrix to graph
g <- new("graphAM", adjMat=friendship.matrix)
# ellipse graph with initials
pdf(file="facebook1.pdf", width=25, height=25)
attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
nAttrs <- list(label=friends.initial)
names(nAttrs$label) <- nodes(g)
plot(g, "neato", attrs=attrs, nodeAttrs=nAttrs)
dev.off()
require(pixmap)
# download small profile picture of each friend
dir.create("photos")
for (i in 1:length(friends.id))
download.file(paste("http://graph.facebook.com", friends.id[i], "picture", sep="/"),
destfile=paste("photos/",friends.id[i],".jpg",sep=""))
system('for i in `ls photos/*.jpg`; do j=${i%.*}; convert $j.jpg $j.pnm; done', wait=TRUE)
# customized node plotting function
makeNodeDrawFunction <- function(x) {
force(x)
function(node, ur, attrs, radConv) {
photo <- read.pnm(paste("photos/", x, ".pnm", sep=""))
nc <- getNodeCenter(node)
addlogo(photo, c(getX(nc)-25, getX(nc)+25), c(getY(nc)-25, getY(nc)+25))
}
}
drawFuns <- apply(as.array(friends.id), 1, makeNodeDrawFunction)
# a graph with photos
pdf(file="facebook2.pdf", width=25, height=25)
attrs <- list(node=list(shape="box", width=0.75, height=0.75))
plot(g, "neato", attrs=attrs, drawNode=drawFuns)
dev.off()
require(Rgraphviz)
library("RGraphics")
require(RGraphics)
g <- new("graphAM", adjMat=friendship.matrix)
source("http://bioconductor.org/biocLite.R")
biocLite("graph")
y
y
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz", type = "source")
g <- new("graphAM", adjMat=friendship.matrix)
require(Rgraphviz)
# convert relation matrix to graph
g <- new("graphAM", adjMat=friendship.matrix)
# ellipse graph with initials
pdf(file="facebook1.pdf", width=25, height=25)
attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
nAttrs <- list(label=friends.initial)
names(nAttrs$label) <- nodes(g)
plot(g, "neato", attrs=attrs, nodeAttrs=nAttrs)
dev.off()
pdf(file="facebook2.pdf", width=25, height=25)
attrs <- list(node=list(shape="box", width=0.75, height=0.75))
plot(g, "neato", attrs=attrs, drawNode=drawFuns)
dev.off()
setwd("~/Documents/Programmieren/R_Code/facebook")
library(caret)
library(pls)
data(gasoline)
gasTrain <- gasoline[11:60, ]
gasTest <- gasoline[1:10, ]
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "LOO")
gas1$Yscores
n <- 10
x <- runif(n)
y <- x^2 + rnorm(n)
plot(x, y)
x <- runif(n, -1, 1)
y <- x^2 + rnorm(n)
plot(x, y)
n <- 50
x <- runif(n, -1, 1)
y <- x^2 + rnorm(n)
plot(x, y)
y <- x^2 + rnorm(n, 0, 0.5)
plot(x, y)
y <- x^2 + rnorm(n, 0, 0.05)
plot(x, y)
y <- x^2 + rnorm(n, 0, 0.1)
plot(x, y)
n <- 20
x <- runif(n, -1, 1)
y <- x^2 + rnorm(n, 0, 0.1)
plot(x, y)
approxfun(x, y)
f <- approxfun(x, y)
plot(f)
f(x)
plot(f(x))
interpl
interp1
splinefun(x, y)
f <- splinefun(x, y)
plot(f)
x <- runif(n, -1, 1)
y <- x^2 + rnorm(n, 0, 0.1)
plot(x, y)
f <- approxfun(x, y)
plot(f, add = T)
plot(x, y, pch = 1)
plot(x, y, pch = 5)
plot(x, y, pch = 10)
plot(x, y, pch = 9)
plot(x, y, pch = 20)
f <- approxfun(x[x >= 0], y)
f <- approxfun(x[x >= 0], y[x >= 0])
f1 <- approxfun(x[x >= 0], y[x >= 0])
f2 <- approxfun(x[x < 0], y[x < 0])
plot(f1, add = T)
plot(f2, add = T)
plot(f2, add = T)
f1 <- spline(x[x >= 0], y[x >= 0])
plot(f1, add = T)
f2 <- spline(x[x < 0], y[x < 0])
plot(f2, add = T)
plot(x, y, pch = 20)
f1 <- spline(x[x >= 0], y[x >= 0])
f2 <- spline(x[x < 0], y[x < 0])
plot(f1, add = T)
plot(f2, add = T)
x <- runif(n)
y <- (x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 20)
f1 <- approxfun(x[x >= 0], y[x >= 0])
f2 <- approxfun(x[x < 0], y[x < 0])
plot(f1, add = T)
plot(f2, add = T)
f1 <- approxfun(x, y)
plot(f1, add = T)
plot(x, y, pch = 20)
plot(f1, add = T)
n <- 20
x <- runif(n)
y <- (x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 20)
n <- 40
x <- runif(n)
y <- (x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 20)
x <- runif(n)
y <- 2*(x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 20)
f1 <- approxfun(x, y)
plot(f1, add = T)
n <- 20
x <- runif(n)
y <- 3*(x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 20)
f1 <- approxfun(x, y)
plot(f1, add = T)
plot(f1(x), add = T)
plot(f1, add = T)
plot(x, y, pch = 20)
f1 <- approxfun(x, y)
plot(f1, add = T)
x <- seq(0,1,length=n)
y <- 3*(x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 20)
f1 <- approxfun(x, y)
plot(f1, add = T)
plot(x, y, pch = 20, size = 2)
plot(x, y, pch = 20, lty = 2)
plot(x, y, pch = 20, lwd = 2)
plot(f1, add = T, lwd = 2)
plot(f1, add = T, lwd = 2, col = "red")
?symbols
plot(x, y, pch = 19, lwd = 2)
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
plot(x, y, pch = 19, lwd = 1)
plot(x, y, pch = 18, lwd = 1)
plot(f1, add = T, lwd = 2, col = "red")
plot(x, y, pch = 18, lwd = 1, xlab ="", ylab = "")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
plot(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, add = T, lwd = 2)
plot(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, add = T, lwd = 2, type = "l")
plot(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, add = T, lwd = 2, type = "l", col = "blue")
y <- 3*(x-0.5)^2 + rnorm(n, 0, 0.1)
plot(x, y, pch = 18, lwd = 1, xlab ="", ylab = "")
plot(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, add = T, lwd = 2, type = "l", col = "blue")
plot(x, y, pch = 18, lwd = 1, xlab ="", ylab = "")
lines(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, add = T, lwd = 2, type = "l", col = "blue")
plot(x, y, pch = 18, lwd = 1, xlab ="", ylab = "")
lines(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
plot(x, y, pch = 18, lwd = 2, xlab ="", ylab = "")
lines(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
plot(x, y, pch = 18, lwd = 4, xlab ="", ylab = "")
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
plot(x, y, pch = 21, lwd = 4, xlab ="", ylab = "")
plot(x, y, pch = 22, lwd = 4, xlab ="", ylab = "")
plot(x, y, pch = 20, lwd = 4, xlab ="", ylab = "")
plot(x, y, pch = 19, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
plot(x, y, pch = 18, lwd = 4, xlab ="", ylab = "")
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
lf <- lm(y~poly(x,2))
plot(lf)
plot(lf)
summary(lf)
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(x, 1.07790*x^2+ 0.18791*x, + 0.30564)
lines(x, 1.07790*x^2+ 0.18791*x + 0.30564)
n <- 20
x <- seq(0,1,length=n)
y <- x + rnorm(n, 0, 0.1)
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), 3*(seq(0,1,length=n) - 0.5)^2, lwd = 2, type = "l", col = "blue")
lines(seq(0,1,length=n), seq(0,1,length=n), lwd = 2, type = "l", col = "blue")
x <- seq(0,1,length=n)
y <- x + rnorm(n, 0, 0.1)
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), seq(0,1,length=n), lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
x <- seq(0,1,length=n)
y <- x + rnorm(n, 0, 0.2)
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), seq(0,1,length=n), lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
lf <- lm(y~x
)
lf
lines(x, 0.99800*x + 0.02886)
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), seq(0,1,length=n), lwd = 2, type = "l", col = "blue")
lines(x, 0.99800*x + 0.02886)
lf <- lm(y~x)
lines(x, 0.99800*x + 0.02886, lwd = 2)
lines(x, 0.99800*x + 0.02886, lwd = 2, col = "red")
summary(lf)
lines(x, 0.99800*x, lwd = 2, col = "red")
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), seq(0,1,length=n), lwd = 2, type = "l", col = "blue")
lines(x, 0.99800*x, lwd = 2, col = "red")
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "LOO")
summary(gas1)
matplot(t(xl), t(dat), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
dat <- gasoline$NIR[1:10, ]
data(gasoline)
library(caret)
library(pls)
data(gasoline)
library(pls)
data(gasoline)
gasTrain <- gasoline[11:60, ]
gasTest <- gasoline[1:10, ]
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "LOO")
summary(gas1)
# plotte die 10 ersten Kurven des Datensatzes
dat <- gasoline$NIR[1:10, ]
matplot(as.matrix(gasoline$NIR))
matplot(t(xl), t(dat), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
xl <- t(matrix(rep(xl, 10), 401, 10))
xl <- seq(900, 1700, by = 2)
matplot(t(X), t(Y), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
X <- matrix(rep(seq(900, 1700, by = 2), 10), 401, 10)
matplot(t(X), t(Y), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
Y <- gasoline$NIR[1:10, ]
X <- matrix(rep(seq(900, 1700, by = 2), 10), 401, 10)
matplot(t(X), t(Y), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
matplot(X, t(Y), lwd = 2, type = "l", pch = 1, lty = 1, ylab = "", xlab = "")
sqrt(mean((predict(gas1, comps=1:6, newdata=gasTest) - gasTest$octane)^2))
sqrt(mean((predict(gas1, comps=1:7, newdata=gasTest) - gasTest$octane)^2))
sqrt(mean((predict(gas1, comps=1:6, newdata=gasTest) - gasTest$octane)^2))
sqrt(mean((predict(gas1, comps=1:4, newdata=gasTest) - gasTest$octane)^2))
data(gasoline)
gasTrain <- gasoline[11:60, ]
gasTest <- gasoline[1:10, ]
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "LOO")
Y <- gasoline$NIR[1:10, ]
X <- matrix(rep(seq(900, 1700, by = 2), 10), 401, 10)
n <- 20
x <- seq(0,1,length=n)
y <- x + rnorm(n, 0, 0.2)
f1 <- approxfun(x, y)
plot(x, y, pch = 17, lwd = 4, xlab ="", ylab = "")
lines(seq(0,1,length=n), seq(0,1,length=n), lwd = 2, type = "l", col = "blue")
f1 <- approxfun(x, y)
plot(f1, add = T, lwd = 2, col = "red")
plot(x, y, type = "l")
library(iplots)
attach(mtcars)
cylinders <- factor(cyl)
gears <- factor(gear)
transmission <- factor(am)
ihist(mpg)
ibar(gears)
iplot(mpg, wt)
ibox(mtcars[c("mpg", "wt", "qsec", "disp", "hp")])
ipcp(mtcars[c("mpg", "wt", "qsec", "disp", "hp")])
imosaic(transmission, cylinders)
detach(mtcars)
source('~/Dropbox/Promotion/R_Paket/npfda-routines.R')
install.packages(c("VIM", "corpcor", "mgcv", "mvtnorm", "partDSA", "sda"))
0/25
90/25
45/25
45/125
hmd <- read.table(con,skip=2,header=T,na.strings=".")
336.35 - 302.65
1644*12/13
9771/61
sample(6, 1:49)
sample(6, 1:49)
sample(1:49)
sample(1:49, 6)
?rbinom
0*log(0)
LogLoss<-function(actual, predicted)
{
result<- -1/length(actual)*(sum((actual*log(predicted)+(1-actual)*log(1-predicted))))
return(result)
}
actual<-c(0,    1,    1,    1,    1,    0,    0,    1,    0,    1)
predicted <- c(1, 0, 0.37063768, 0.48732519, 0.88929869, 0.60626423, 0.09678324, 0.38135864, 0.20463064, 0.21945892)
LogLoss(actual=actual, predicted=predicted)
predicted<-c(0.24160452,    0.41107934,    0.37063768,    0.48732519,    0.88929869,    0.60626423,    0.09678324,    0.38135864,    0.20463064,    0.21945892)
LogLoss(actual=actual, predicted=predicted)
setwd("~/Documents/Programmieren/github/funktionale-Datenanalyse")
map <- GetMap(center = c(57.486308980380834,-153.396606445312),
zoom=4,
markers = "&markers=color:blue|label:K|57.486308980380834,-153.396606445312",
destfile = "kodiak_insel.png", maptype="terrain");
library("googleVis")
map <- GetMap(center = c(57.486308980380834,-153.396606445312),
zoom=4,
markers = "&markers=color:blue|label:K|57.486308980380834,-153.396606445312",
destfile = "kodiak_insel.png", maptype="terrain");
library("RgoogleMaps")
map <- GetMap(center = c(57.486308980380834,-153.396606445312),
zoom=4,
markers = "&markers=color:blue|label:K|57.486308980380834,-153.396606445312",
destfile = "kodiak_insel.png", maptype="terrain");
install.packages(c("BSDA", "Boruta", "Cubist", "Deducer", "DeducerExtras", "DeducerSpatial", "GAMens", "Hmisc", "ISwR", "MCMCpack", "Matrix", "RODBC", "RWeka", "Rcpp", "RcppArmadillo", "RgoogleMaps", "Snowball", "SparseM", "TeachingDemos", "VGAM", "Zelig", "adehabitat", "adehabitatMA", "ape", "aqp", "benchmark", "caret", "clue", "coin", "devtools", "digest", "diveMove", "earth", "ellipse", "ergm", "evaluate", "fastICA", "fda.usc", "filehash", "flexmix", "foreach", "fossil", "gRbase", "gee", "geosphere", "glmnet", "googleVis", "ipred", "kml", "knitr", "ks", "lars", "lattice", "locfit", "longitudinalData", "mboost", "mediation", "mice", "multcomp", "network", "numDeriv", "osmar", "party", "plotrix", "pmml", "quantreg", "raster", "relevent", "rgl", "rjson", "rms", "robustbase", "rpart", "scales", "sets", "sfsmisc", "sp", "spacetime", "spatstat", "spdep", "superpc", "tcltk2", "timeDate", "timeSeries", "tseries", "twitteR", "vcd", "waveslim", "xts"))
data(Moisturespectrum)
library("fds")
data(Moisturespectrum)
set.seed(1)
ind <- sample(1:100, 5)
fat.y <- Moisturespectrum$y[ , ind]
fat.df <- as.data.frame(fat.y)
fat.df$x <- Moisturespectrum$x
fat.df <- melt(fat.df, id="x")
library("reshape")
fat.df <- melt(fat.df, id="x")
colours <- rainbow_hcl(5, start=30, end=300)
theme_set(theme_bw())
library("ggplot2")
ggplot(fat.df) +
theme_set(theme_bw())
ggplot(fat.df) +
geom_point(aes(x=x, y=value, group=variable, col=variable), size=2) +
scale_color_manual("", values=colours) +
xlab("") + ylab("") +
opts(legend.position="none",
axis.title.y = theme_text(size = 12, angle=90),
axis.title.x = theme_text(size = 12, vjust=0),
axis.text.x = theme_text(size = 16),
axis.text.y= theme_text(size = 16))
theme_set(theme_bw())
library("knitr")
knit("fANOVA.Rnw")
